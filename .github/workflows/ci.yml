name: CI

# Trigger the workflow on push or pull request, but only for the master branch
on:
  pull_request:
  push:
    branches: [master]

jobs:
  cabal:
    name: cabal / ghc-${{ matrix.ghc }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          # - macOS-latest
        cabal:
          - "latest"
        ghc:
          - "9.2"
          - "9.4"
          - "9.6"
          - "9.8"
          - "9.10"

    steps:
    - uses: actions/checkout@v4

    - name: Setup Haskell
      uses: haskell-actions/setup@v2
      id: setup
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}
        cabal-update: true

    - name: Configure the build
      run: |
        cabal configure --enable-tests --enable-benchmarks --disable-documentation
        # Generate dist-newstyle/cache/plan.json for the cache key.
        cabal build all --dry-run

    - name: Restore cached dependencies
      uses: actions/cache/restore@v4
      id: cache
      env:
        key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
      with:
        path: ${{ steps.setup.outputs.cabal-store }}
        key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
        restore-keys: ${{ env.key }}-

    - name: Install dependencies
      # If we had an exact cache hit, the dependencies will be up to date.
      if: steps.cache.outputs.cache-hit != 'true'
      run: cabal build all --only-dependencies

    # Cache dependencies already here, so that we do not have to rebuild them should the subsequent steps fail.
    - name: Save cached dependencies
      uses: actions/cache/save@v4
      # If we had an exact cache hit, trying to save the cache would error because of key clash.
      if: steps.cache.outputs.cache-hit != 'true'
      with:
        path: ${{ steps.setup.outputs.cabal-store }}
        key: ${{ steps.cache.outputs.cache-primary-key }}

    - name: Build
      run: |
        cabal build all --enable-tests --enable-benchmarks --flags="buildexample"

    - name: Test
      run: |
        cabal test all --enable-tests --enable-benchmarks --flags="buildexample"

  stack:
    name: stack / ubuntu-latest
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Haskell Stack
      uses: haskell-actions/setup@v2
      id: setup
      with:
        stack-version: latest
        enable-stack: true

    # TODO: As far as I can tell, caching for stack doesn't work with
    # recent haskell-actions/setup:
    # https://github.com/haskell-actions/setup/issues/86
    # Need to figure out the best way to do this.
    - uses: actions/cache@v4
      name: Cache ~/.stack
      with:
        path: ${{ steps.setup.outputs.stack-root }}
        key: ${{ runner.os }}-stack

    - name: Build
      run: |
        stack build --test --bench --no-run-tests --no-run-benchmarks --flag servant-static-th:buildexample

    - name: Test
      run: |
        stack test --bench --no-run-benchmarks --flag servant-static-th:buildexample
